# Selected device 8
# Generated by uvusbreplay 0.1
# uvusbreplay copyright 2011 John McMaster <JohnDMcMaster@gmail.com>
# cmd: /home/mcmaster/bin/usbrply --device-hi ham/2019-12-26_02_init.pcapng --wrapper --vid 0x0661 --pid 0xa802

import binascii
import datetime
import time
import usb1
from uvscada.util import hexdump, add_bool_arg
from PIL import Image
import os
from faxitron import ham
import glob

def default_dir(postfix):
    datestr = datetime.datetime.now().isoformat()[0:10]
    n = 1
    while True:
        fn = 'out/%s_%02u' % (datestr, n)
        if len(glob.glob(fn + '*')) == 0:
            if postfix:
                return fn + '_' + postfix
            else:
                return fn
        n += 1


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:  # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise

def main():
    import argparse 
    
    parser = argparse.ArgumentParser(description='Replay captured USB packets')
    add_bool_arg(parser, '--bin', default=False, help='Write .bin raw data capture')
    add_bool_arg(parser, '--png', default=True, help='Write normal .png image file')
    parser.add_argument('--dir', default=None, help='Output dir')
    parser.add_argument('-n', default=1, type=int, help='Number images')
    parser.add_argument('--exp', default=250, type=int, help='Exposure ms')
    parser.add_argument('--postfix', default=None, help='')
    args = parser.parse_args()

    outdir = args.dir
    if outdir is None:
        outdir = default_dir(args.postfix)
    mkdir_p(outdir)

    def cap_cb(n, buff):
        binfn = '%s/%02u.bin' % (outdir, n)
        pngfn = '%s/%02u.png' % (outdir, n)
        
        if args.bin:
            print("Saving %s" % binfn)
            open(binfn, 'w').write(buff)
        if args.png:
            print("Saving %s" % pngfn)
            ham.decode(buff).save(pngfn)

    h = ham.Hamamatsu()
    h.set_exp(args.exp)

    print('')
    print('')
    print('')

    h.cap(cap_cb, n=args.n)
    

if __name__ == "__main__":
    main()

